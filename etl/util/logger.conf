# 定义logger模块，root是父类，必需存在的，其它的是自定义。
# logging.getLogger(NAME)便相当于向logging模块注册了一种日志打印
# name 中用 . 表示 log 的继承关系
[loggers]
keys=root,auditInfoLogger,auditResInfoLogger,pandasEtlLogger,petlLogger
 
# 定义handler
[handlers]
keys=auditInfoHandler,auditResInfoHandler,pandasEtlLogger,pandasErrorLogger,petlLogger,consoleHandler,petlErrorHandler
 
# 定义格式化输出
[formatters]
keys=auditInfoFmt,auditResInfoFmt,pandasEtlFmt,petlFormatter
 
#--------------------------------------------------
# 实现上面定义的logger模块，必需是[logger_xxxx]这样的形式
#--------------------------------------------------
# [logger_xxxx] logger_模块名称
# level     级别，级别有DEBUG、INFO、WARNING、ERROR、CRITICAL
# handlers  处理类，可以有多个，用逗号分开
# qualname  logger名称，应用程序通过 logging.getLogger获取。对于不能获取的名称，则记录到root模块。
# propagate 是否继承父类的log信息，0:否 1:是
[logger_root]
level=INFO
handlers=auditInfoHandler
 
[logger_auditInfoLogger]
level=INFO
handlers=auditInfoHandler
propagate=0
qualname=auditInfoLogger

[logger_auditResInfoLogger]
level=INFO
handlers=auditResInfoHandler
propagate=0
qualname=auditResInfoLogger

[logger_pandasEtlLogger]
level=INFO
handlers=pandasEtlLogger,pandasErrorLogger
propagate=0
qualname=pandasEtlLogger

[logger_petlLogger]
level=INFO
handlers=petlLogger,consoleHandler,petlErrorHandler
propagate=0
qualname=petlLogger
#--------------------------------------------------
# handler
#--------------------------------------------------
# [handler_xxxx]
# class handler类名
# level 日志级别
# formatter，上面定义的formatter
# args handler初始化函数参数
 
[handler_auditInfoHandler]
class=logging.handlers.TimedRotatingFileHandler
level=INFO
formatter=auditInfoFmt
args=('/data1/ad/log/etl/aduit.log','M', 10000, 10)

[handler_auditResInfoHandler]
class=logging.handlers.TimedRotatingFileHandler
level=INFO
formatter=auditResInfoFmt
args=('auditres.log','M', 10000, 10)

[handler_pandasEtlLogger]
class=logging.handlers.TimedRotatingFileHandler
level=INFO
formatter=pandasEtlFmt
args=('/data1/ad/log/etl/pandas_etl.log','M', 10000, 10)

[handler_petlLogger]
class=logging.handlers.TimedRotatingFileHandler
level=INFO
formatter=petlFormatter
args=('/data1/ad/log/etl/petl_etl.log','M', 10000, 10)

[handler_consoleHandler]
class=StreamHandler
level=INFO
formatter=petlFormatter
args=(sys.stdout,)

[handler_petlErrorHandler]
class=logging.handlers.TimedRotatingFileHandler
level=ERROR
formatter=petlFormatter
args=('petl_etl_error.log','M', 10000, 10)
[handler_pandasErrorLogger]
class=logging.handlers.TimedRotatingFileHandler
level=WARN
formatter=pandasEtlFmt
args=('/data1/ad/log/etl/pandas_etl_error.log','M', 10000, 10)#--------------------------------------------------
# 日志格式
#--------------------------------------------------
# %(asctime)s       年-月-日 时-分-秒,毫秒 2013-04-26 20:10:43,745
# %(filename)s      文件名，不含目录
# %(pathname)s      目录名，完整路径
# %(funcName)s      函数名
# %(levelname)s     级别名
# %(lineno)d        行号
# %(module)s        模块名
# %(message)s       消息体
# %(name)s          日志模块名
# %(process)d       进程id
# %(processName)s   进程名
# %(thread)d        线程id
# %(threadName)s    线程名
 
[formatter_auditInfoFmt]
format=[%(levelname)s] %(asctime)s [%(name)s] [%(funcName)s] %(message)s
datefmt=
class=logging.Formatter

[formatter_auditResInfoFmt]
format=[%(levelname)s] %(asctime)s [%(name)s] [%(funcName)s] %(message)s
datefmt=
class=logging.Formatter

[formatter_pandasEtlFmt]
format=[%(levelname)s] %(asctime)s [%(name)s] [%(funcName)s] %(message)s
datefmt=
class=logging.Formatter

[formatter_petlFormatter]
format=[%(levelname)s] %(asctime)s [%(name)s] [%(funcName)s] %(message)s
datefmt=
class=logging.Formatter